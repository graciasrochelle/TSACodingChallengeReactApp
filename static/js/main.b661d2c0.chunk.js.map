{"version":3,"sources":["Components/Loader/loading.gif","Components/Header.js","Components/Footer.js","Components/Loader/Loader.js","mockData.js","apiService.js","Components/ContactList/ContactTable.js","Components/ContactList/ContactList.js","Components/NoMatch.js","Components/AddContact/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","Footer","Loader","alt","src","loading","mockData","displayContactDetails","contacts","id","email","fullName","phoneNumbers","setData","a","fetch","process","res","ok","json","payload","data","isLoading","alert","console","error","useFetchContacts","defaultResponse","useState","useEffect","setTimeout","fetchContacts","addContact","reqt","controller","AbortController","signal","abort","isSuccess","method","headers","Accept","body","JSON","stringify","then","ContactTable","props","maxColumnSpan","length","rows","Table","responsive","striped","bordered","hover","map","h","i","key","r","join","colspan","Alert","variant","colSpan","Button","ContactList","fetchResponse","apiEndpoint","apiService","log","NoMatch","location","useLocation","pathname","useInput","initialValue","value","setValue","reset","bind","onChange","event","target","useInputPhoneNumber","con","tempArr","split","AddContact","bindFullName","resetFullName","bindEmail","resetEmail","bindPhoneNumbers","resetPhoneNumbers","request","setRequest","isValid","setValid","onSubmit","evt","preventDefault","phoneRegEx","RegExp","match","htmlFor","type","required","placeholder","App","exact","path","Boolean","window","hostname","ReactDOM","render","basename","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b661d2c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.466ec83d.gif\";","import React from \"react\";\r\n\r\nfunction Header() {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark justify-content-center\">\r\n\t\t\t\t<a className=\"navbar-brand\" href=\"/\">\r\n\t\t\t\t\t<h1 className=\"text-center\">Coding Challenge</h1>\r\n\t\t\t\t</a>\r\n\t\t\t</nav>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t<footer className=\"py-1 bg-dark text-white\">\r\n\t\t\t<h5 className=\"text-center\">Website by Rochelle Gracias</h5>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport loading from \"./loading.gif\";\r\n\r\nfunction Loader() {\r\n\treturn (\r\n\t\t<div className=\"col-9 mx-auto col-md-6 col-lg-3 my-3 align-self-center \">\r\n\t\t\t<img alt=\"loading...\" src={loading} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Loader;\r\n","export const mockData = {\r\n\tdisplayContactDetails: [\"Full Name\", \"Email\", \"Phone Numbers\"],\r\n\tcontacts: [\r\n\t\t{\r\n\t\t\tid: \"4D050C00-661E-492A-928E-631682BE6505\",\r\n\t\t\temail: \"rper1001@mit.edu\",\r\n\t\t\tfullName: \"radia perlman\",\r\n\t\t\tphoneNumbers: [\"0488445688\", \"+61488224568\", \"0393337119\"],\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"DD7B7510-92CB-4F21-A054-BE7B7DAC126C\",\r\n\t\t\temail: \"alex@bell-labs.com\",\r\n\t\t\tfullName: \"Alex Bell\",\r\n\t\t\tphoneNumbers: [\"0385786688\", \"1800728069\"],\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"864653FF-C040-4E1A-BD75-6AEDC749C83E\",\r\n\t\t\tfullName: \"fredrik IDESTAM\",\r\n\t\t\tphoneNumbers: [\"+6139888998\"],\r\n\t\t},\r\n\t],\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { mockData } from \"./mockData\";\r\n\r\nasync function fetchContacts(setData) {\r\n\ttry {\r\n\t\tconst res = await fetch(`${process.env.REACT_APP_ALLCONTACT_ENDPOINT}`);\r\n\t\tif (res.ok) {\r\n\t\t\tconst payload = await res.json();\r\n\t\t\tsetData({\r\n\t\t\t\tdata: payload,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\talert(\"Using mock data!\");\r\n\t\t\tsetData({\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\tdata: mockData,\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tconsole.error(e);\r\n\t}\r\n}\r\n\r\nexport function useFetchContacts(defaultResponse) {\r\n\tconst [data, setData] = useState(defaultResponse);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tfetchContacts(setData);\r\n\t\t}, 1000);\r\n\t}, [data]);\r\n\r\n\treturn data;\r\n}\r\n\r\nexport const addContact = async (reqt) => {\r\n\tconst controller = new AbortController();\r\n\tconst signal = controller.signal;\r\n\tsetTimeout(() => {\r\n\t\tcontroller.abort();\r\n\t}, 1000);\r\n\ttry {\r\n\t\tlet isSuccess = false;\r\n\t\tconst res = fetch(\r\n\t\t\t`${process.env.REACT_APP_ALLCONTACT_ENDPOINT}`,\r\n\t\t\t{\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(reqt),\r\n\t\t\t},\r\n\t\t\t{ signal }\r\n\t\t)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then(() => (res.ok ? (isSuccess = true) : (isSuccess = false)));\r\n\t\treturn isSuccess;\r\n\t} catch (e) {\r\n\t\tconsole.error(e);\r\n\t}\r\n};\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"./ContactList.css\";\r\nimport { Button, Alert } from \"react-bootstrap\";\r\n\r\nexport default function ContactTable(props) {\r\n\tconst headers = props.data.displayContactDetails;\r\n\tconst maxColumnSpan = headers.length;\r\n\tconst rows = props.data.contacts;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"container m-12\">\r\n\t\t\t\t<Table responsive striped bordered hover>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t{headers.map((h, i) => (\r\n\t\t\t\t\t\t\t\t<th key={i}>{h}</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{rows && rows.length > 0 ? (\r\n\t\t\t\t\t\t\trows.map((r, i) => (\r\n\t\t\t\t\t\t\t\t<tr key={r.id}>\r\n\t\t\t\t\t\t\t\t\t<td key={i}>{r.fullName}</td>\r\n\t\t\t\t\t\t\t\t\t<td key={i}>{r.email ? r.email : \"---\"}</td>\r\n\t\t\t\t\t\t\t\t\t<td key={i}>\r\n\t\t\t\t\t\t\t\t\t\t{r.phoneNumbers && r.phoneNumbers.join(\" || \")}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td colspan={maxColumnSpan}>\r\n\t\t\t\t\t\t\t\t\t<Alert key=\"no-content\" variant=\"info\">\r\n\t\t\t\t\t\t\t\t\t\tNo Content\r\n\t\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td colSpan={maxColumnSpan} className=\"align-contents\">\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"primary\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"px-4\"\r\n\t\t\t\t\t\t\t\t\thref=\"/TSACodingChallengeReactApp/#/addContact\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd new contact\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport \"./ContactList.css\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport * as apiService from \"../../apiService\";\r\nimport ContactTable from \"./ContactTable\";\r\n\r\nfunction ContactList(props) {\r\n\tlet fetchResponse;\r\n\tif (props.apiEndpoint) {\r\n\t\tfetchResponse = apiService.useFetchContacts({\r\n\t\t\tisLoading: true,\r\n\t\t\tdata: null,\r\n\t\t});\r\n\t}\r\n\tconsole.log(fetchResponse);\r\n\r\n\tif (fetchResponse && fetchResponse.isLoading && !fetchResponse.data) {\r\n\t\treturn <Loader />;\r\n\t}\r\n\r\n\treturn (\r\n\t\tfetchResponse &&\r\n\t\t!fetchResponse.isLoading && <ContactTable data={fetchResponse.data} />\r\n\t);\r\n}\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction NoMatch() {\r\n\tlet location = useLocation();\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3>\r\n\t\t\t\tNo match for <code>{location.pathname}</code>\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default NoMatch;\r\n","import React, { useState } from \"react\";\r\nimport * as apiService from \"../../apiService\";\r\nimport \"./AddContact.css\";\r\nimport { Button, Alert } from \"react-bootstrap\";\r\n\r\nfunction AddContact(props) {\r\n\tconst {\r\n\t\tvalue: fullName,\r\n\t\tbind: bindFullName,\r\n\t\treset: resetFullName,\r\n\t} = useInput(\"\");\r\n\tconst { value: email, bind: bindEmail, reset: resetEmail } = useInput(\"\");\r\n\tconst {\r\n\t\tvalue: phoneNumbers,\r\n\t\tbind: bindPhoneNumbers,\r\n\t\treset: resetPhoneNumbers,\r\n\t} = useInputPhoneNumber([]);\r\n\r\n\tconst [request, setRequest] = useState({});\r\n\tconst [isValid, setValid] = useState(false);\r\n\r\n\tconst handleSubmit = (evt) => {\r\n\t\tevt.preventDefault();\r\n\t\tconst reqt = {\r\n\t\t\temail,\r\n\t\t\tfullName,\r\n\t\t\tphoneNumbers,\r\n\t\t};\r\n\t\tif (phoneNumbers) {\r\n\t\t\tvar phoneRegEx = new RegExp(\r\n\t\t\t\t// eslint-disable-next-line\r\n\t\t\t\t`^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$`\r\n\t\t\t);\r\n\t\t\tfor (var i = 0; i < phoneNumbers.length; i++) {\r\n\t\t\t\tphoneNumbers[i].match(phoneRegEx) ? setValid(true) : setValid(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (isValid) {\r\n\t\t\t\tsetRequest({\r\n\t\t\t\t\treqt,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tapiService.addContact(reqt);\r\n\t\t\t\tresetEmail();\r\n\t\t\t\tresetFullName();\r\n\t\t\t\tresetPhoneNumbers();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Alert key=\"request\" variant=\"info\">\r\n\t\t\t\tNew Contact Details: {JSON.stringify(request)}\r\n\t\t\t</Alert>\r\n\t\t\t<form className=\"form-container\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-4\">\r\n\t\t\t\t\t\t<label htmlFor=\"subject\">Full Name</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-6\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t{...bindFullName}\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\tplaceholder=\"Enter full name\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-4\">\r\n\t\t\t\t\t\t<label htmlFor=\"subject\">Email (Optional)</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-6\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"email\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t{...bindEmail}\r\n\t\t\t\t\t\t\tplaceholder=\"Enter email address\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-4\">\r\n\t\t\t\t\t\t<label htmlFor=\"subject\">Phone Numbers</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-3 col-md-6\">\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tid=\"phoneNumber\"\r\n\t\t\t\t\t\t\t{...bindPhoneNumbers}\r\n\t\t\t\t\t\t\tplaceholder=\"Enter phone numbers\"\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Alert key=\"errPhoneNum\" variant=\"danger\">\r\n\t\t\t\t\t\t\tSeries of phone numbers should be comma separated (AU Format)\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t\t<Button variant=\"secondary\" className=\"px-5\" href=\"/\">\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t\t<Button variant=\"primary\" className=\"px-5\" type=\"submit\">\r\n\t\t\t\t\t\t\tSave Changes\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nconst useInput = (initialValue) => {\r\n\tconst [value, setValue] = useState(initialValue);\r\n\r\n\treturn {\r\n\t\tvalue,\r\n\t\tsetValue,\r\n\t\treset: () => setValue(initialValue),\r\n\t\tbind: {\r\n\t\t\tvalue,\r\n\t\t\tonChange: (event) => {\r\n\t\t\t\tsetValue(event.target.value);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n};\r\n\r\nconst useInputPhoneNumber = (initialValue) => {\r\n\tconst [value, setValue] = useState(initialValue);\r\n\r\n\treturn {\r\n\t\tvalue,\r\n\t\tsetValue,\r\n\t\treset: () => setValue([]),\r\n\t\tbind: {\r\n\t\t\tvalue,\r\n\t\t\tonChange: (event) => {\r\n\t\t\t\tlet con = event.target.value;\r\n\t\t\t\tlet tempArr = [];\r\n\t\t\t\tif (con) {\r\n\t\t\t\t\ttempArr = con.split(\",\");\r\n\t\t\t\t}\r\n\t\t\t\tsetValue(tempArr);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport default AddContact;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Header from \"./Components/Header\";\r\nimport Footer from \"./Components/Footer\";\r\nimport ContactList from \"./Components/ContactList/ContactList\";\r\nimport NoMatch from \"./Components/NoMatch\";\r\nimport AddContact from \"./Components/AddContact\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header />\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<ContactList apiEndpoint={`/`} />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/addContact\">\r\n\t\t\t\t\t\t<AddContact apiEndpoint={`/contact`} />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"*\">\r\n\t\t\t\t\t\t<NoMatch />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<Router basename={`${process.env.PUBLIC_URL}/`}>\r\n\t\t<React.StrictMode>\r\n\t\t\t<App />\r\n\t\t</React.StrictMode>\r\n\t</Router>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}